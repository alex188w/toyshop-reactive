/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.openapi.server.api;

import com.example.openapi.server.model.ConfirmRequest;
import com.example.openapi.server.model.ConfirmResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "Confirm", description = "the Confirm API")
public interface ConfirmApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /confirm : Подтвердить оформление заказа
     * Эмулирует процесс оформления заказа после успешной оплаты. Возвращает сведения о заказе и статус подтверждения. 
     *
     * @param confirmRequest  (required)
     * @return Заказ успешно оформлен (status code 200)
     *         or Ошибка в запросе (status code 400)
     *         or Ошибка сервиса (status code 500)
     */
    @Operation(
        operationId = "confirmPost",
        summary = "Подтвердить оформление заказа",
        description = "Эмулирует процесс оформления заказа после успешной оплаты. Возвращает сведения о заказе и статус подтверждения. ",
        tags = { "Confirm" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Заказ успешно оформлен", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ConfirmResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Ошибка в запросе"),
            @ApiResponse(responseCode = "500", description = "Ошибка сервиса")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/confirm",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ConfirmResponse> confirmPost(
        @Parameter(name = "ConfirmRequest", description = "", required = true) @Valid @RequestBody ConfirmRequest confirmRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"orderId\" : \"12345\", \"message\" : \"Заказ успешно оформлен\", \"confirmed\" : true, \"transactionId\" : \"tx_987654\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
