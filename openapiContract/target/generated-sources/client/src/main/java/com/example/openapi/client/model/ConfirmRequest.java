/*
 * Payment Service API
 * API сервиса платежей для оформления заказов. Предоставляет три эндпоинта: - получение баланса на счёте - осуществление платежа - подтверждение заказа после успешной оплаты 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.openapi.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ConfirmRequest
 */
@JsonPropertyOrder({
  ConfirmRequest.JSON_PROPERTY_ORDER_ID,
  ConfirmRequest.JSON_PROPERTY_TRANSACTION_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class ConfirmRequest {
  public static final String JSON_PROPERTY_ORDER_ID = "orderId";
  @jakarta.annotation.Nonnull
  private String orderId;

  public static final String JSON_PROPERTY_TRANSACTION_ID = "transactionId";
  @jakarta.annotation.Nonnull
  private String transactionId;

  public ConfirmRequest() {
  }

  public ConfirmRequest orderId(@jakarta.annotation.Nonnull String orderId) {
    
    this.orderId = orderId;
    return this;
  }

  /**
   * Get orderId
   * @return orderId
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ORDER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getOrderId() {
    return orderId;
  }


  @JsonProperty(JSON_PROPERTY_ORDER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOrderId(@jakarta.annotation.Nonnull String orderId) {
    this.orderId = orderId;
  }

  public ConfirmRequest transactionId(@jakarta.annotation.Nonnull String transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

  /**
   * Get transactionId
   * @return transactionId
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTransactionId() {
    return transactionId;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTransactionId(@jakarta.annotation.Nonnull String transactionId) {
    this.transactionId = transactionId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfirmRequest confirmRequest = (ConfirmRequest) o;
    return Objects.equals(this.orderId, confirmRequest.orderId) &&
        Objects.equals(this.transactionId, confirmRequest.transactionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orderId, transactionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfirmRequest {\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

